apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.

if (keystorePropertiesFile.exists()){
	keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// 判断是位于本地还是CI服务器
if (!keyStoreFile.exists()){
    keyStoreFile = file(keystoreProperties['storeFileCI'])
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.benhero.glstudio"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
    }
	
	signingConfigs {
		release {
			//storeFile //file("./GLStudio.jks")
			//storePassword 'xxxxxx'
			//keyAlias 'xxxx'
			//keyPassword 'xxxxxx'
			//v2SigningEnabled false
			//keyAlias keystoreProperties['keyAlias']
            //keyPassword keystoreProperties['keyPwd']
            storeFile keyStoreFile
            //storePassword keystoreProperties['storePwd']
			//storeFile file("../my.keystore")
            //storePassword project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : System.getenv("KEYSTORE_PASS")
            //keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME")
            //keyPassword project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : System.getenv("ALIAS_PASS")
			storePassword keystorePropertiesFile.exists() ? keystoreProperties['KEYSTORE_PASS'] : System.getenv("KEYSTORE_PASS")
            keyAlias keystorePropertiesFile.exists() ? keystoreProperties['ALIAS_NAME'] : System.getenv("ALIAS_NAME")
            keyPassword keystorePropertiesFile.exists() ? keystoreProperties['ALIAS_PASS'] : System.getenv("ALIAS_PASS")
			//storePassword keystoreProperties.hasProperty("KEYSTORE_PASS") ? keystoreProperties['KEYSTORE_PASS'] : System.getenv("KEYSTORE_PASS")
            //keyAlias keystoreProperties.hasProperty("ALIAS_NAME") ? keystoreProperties['ALIAS_NAME'] : System.getenv("ALIAS_NAME")
            //keyPassword keystoreProperties.hasProperty("ALIAS_PASS") ? keystoreProperties['ALIAS_PASS'] : System.getenv("ALIAS_PASS")
		}
	}
	
	
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:animated-vector-drawable:28.0.0'
    implementation 'com.android.support:support-media-compat:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.jayfeng:lesscode-core:2.4.2'
    implementation 'gun0912.ted:tedpermission:2.2.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

repositories {
    mavenCentral()
}
